// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PowerFeedSupply Supply
//
// swagger:model powerFeedSupply
type PowerFeedSupply struct {

	// label
	// Required: true
	// Enum: [AC DC]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [ac dc]
	Value *string `json:"value"`
}

func (m *PowerFeedSupply) UnmarshalJSON(b []byte) error {
	type PowerFeedSupplyAlias PowerFeedSupply
	var t PowerFeedSupplyAlias
	if err := json.Unmarshal([]byte("{\"id\":1,\"label\":\"AC\",\"value\":\"ac\"}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = PowerFeedSupply(t)
	return nil
}

// Validate validates this power feed supply
func (m *PowerFeedSupply) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var powerFeedSupplyTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AC","DC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		powerFeedSupplyTypeLabelPropEnum = append(powerFeedSupplyTypeLabelPropEnum, v)
	}
}

const (

	// PowerFeedSupplyLabelAC captures enum value "AC"
	PowerFeedSupplyLabelAC string = "AC"

	// PowerFeedSupplyLabelDC captures enum value "DC"
	PowerFeedSupplyLabelDC string = "DC"
)

// prop value enum
func (m *PowerFeedSupply) validateLabelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, powerFeedSupplyTypeLabelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PowerFeedSupply) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var powerFeedSupplyTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ac","dc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		powerFeedSupplyTypeValuePropEnum = append(powerFeedSupplyTypeValuePropEnum, v)
	}
}

const (

	// PowerFeedSupplyValueAc captures enum value "ac"
	PowerFeedSupplyValueAc string = "ac"

	// PowerFeedSupplyValueDc captures enum value "dc"
	PowerFeedSupplyValueDc string = "dc"
)

// prop value enum
func (m *PowerFeedSupply) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, powerFeedSupplyTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PowerFeedSupply) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PowerFeedSupply) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PowerFeedSupply) UnmarshalBinary(b []byte) error {
	var res PowerFeedSupply
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
