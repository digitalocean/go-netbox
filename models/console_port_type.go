// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsolePortType Type
//
// swagger:model consolePortType
type ConsolePortType struct {

	// label
	// Required: true
	// Enum: [DE-9 DB-25 RJ-11 RJ-12 RJ-45 USB Type A USB Type B USB Type C USB Mini A USB Mini B USB Micro A USB Micro B Other]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [de-9 db-25 rj-11 rj-12 rj-45 usb-a usb-b usb-c usb-mini-a usb-mini-b usb-micro-a usb-micro-b other]
	Value *string `json:"value"`
}

// Validate validates this console port type
func (m *ConsolePortType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var consolePortTypeTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DE-9","DB-25","RJ-11","RJ-12","RJ-45","USB Type A","USB Type B","USB Type C","USB Mini A","USB Mini B","USB Micro A","USB Micro B","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consolePortTypeTypeLabelPropEnum = append(consolePortTypeTypeLabelPropEnum, v)
	}
}

const (

	// ConsolePortTypeLabelDE9 captures enum value "DE-9"
	ConsolePortTypeLabelDE9 string = "DE-9"

	// ConsolePortTypeLabelDB25 captures enum value "DB-25"
	ConsolePortTypeLabelDB25 string = "DB-25"

	// ConsolePortTypeLabelRJ11 captures enum value "RJ-11"
	ConsolePortTypeLabelRJ11 string = "RJ-11"

	// ConsolePortTypeLabelRJ12 captures enum value "RJ-12"
	ConsolePortTypeLabelRJ12 string = "RJ-12"

	// ConsolePortTypeLabelRJ45 captures enum value "RJ-45"
	ConsolePortTypeLabelRJ45 string = "RJ-45"

	// ConsolePortTypeLabelUSBTypeA captures enum value "USB Type A"
	ConsolePortTypeLabelUSBTypeA string = "USB Type A"

	// ConsolePortTypeLabelUSBTypeB captures enum value "USB Type B"
	ConsolePortTypeLabelUSBTypeB string = "USB Type B"

	// ConsolePortTypeLabelUSBTypeC captures enum value "USB Type C"
	ConsolePortTypeLabelUSBTypeC string = "USB Type C"

	// ConsolePortTypeLabelUSBMiniA captures enum value "USB Mini A"
	ConsolePortTypeLabelUSBMiniA string = "USB Mini A"

	// ConsolePortTypeLabelUSBMiniB captures enum value "USB Mini B"
	ConsolePortTypeLabelUSBMiniB string = "USB Mini B"

	// ConsolePortTypeLabelUSBMicroA captures enum value "USB Micro A"
	ConsolePortTypeLabelUSBMicroA string = "USB Micro A"

	// ConsolePortTypeLabelUSBMicroB captures enum value "USB Micro B"
	ConsolePortTypeLabelUSBMicroB string = "USB Micro B"

	// ConsolePortTypeLabelOther captures enum value "Other"
	ConsolePortTypeLabelOther string = "Other"
)

// prop value enum
func (m *ConsolePortType) validateLabelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, consolePortTypeTypeLabelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConsolePortType) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var consolePortTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["de-9","db-25","rj-11","rj-12","rj-45","usb-a","usb-b","usb-c","usb-mini-a","usb-mini-b","usb-micro-a","usb-micro-b","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consolePortTypeTypeValuePropEnum = append(consolePortTypeTypeValuePropEnum, v)
	}
}

const (

	// ConsolePortTypeValueDe9 captures enum value "de-9"
	ConsolePortTypeValueDe9 string = "de-9"

	// ConsolePortTypeValueDb25 captures enum value "db-25"
	ConsolePortTypeValueDb25 string = "db-25"

	// ConsolePortTypeValueRj11 captures enum value "rj-11"
	ConsolePortTypeValueRj11 string = "rj-11"

	// ConsolePortTypeValueRj12 captures enum value "rj-12"
	ConsolePortTypeValueRj12 string = "rj-12"

	// ConsolePortTypeValueRj45 captures enum value "rj-45"
	ConsolePortTypeValueRj45 string = "rj-45"

	// ConsolePortTypeValueUsba captures enum value "usb-a"
	ConsolePortTypeValueUsba string = "usb-a"

	// ConsolePortTypeValueUsbb captures enum value "usb-b"
	ConsolePortTypeValueUsbb string = "usb-b"

	// ConsolePortTypeValueUsbc captures enum value "usb-c"
	ConsolePortTypeValueUsbc string = "usb-c"

	// ConsolePortTypeValueUsbMinia captures enum value "usb-mini-a"
	ConsolePortTypeValueUsbMinia string = "usb-mini-a"

	// ConsolePortTypeValueUsbMinib captures enum value "usb-mini-b"
	ConsolePortTypeValueUsbMinib string = "usb-mini-b"

	// ConsolePortTypeValueUsbMicroa captures enum value "usb-micro-a"
	ConsolePortTypeValueUsbMicroa string = "usb-micro-a"

	// ConsolePortTypeValueUsbMicrob captures enum value "usb-micro-b"
	ConsolePortTypeValueUsbMicrob string = "usb-micro-b"

	// ConsolePortTypeValueOther captures enum value "other"
	ConsolePortTypeValueOther string = "other"
)

// prop value enum
func (m *ConsolePortType) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, consolePortTypeTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConsolePortType) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsolePortType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsolePortType) UnmarshalBinary(b []byte) error {
	var res ConsolePortType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
