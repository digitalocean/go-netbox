// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceInterfaceType Type
//
// swagger:model deviceInterfaceType
type DeviceInterfaceType struct {

	// label
	// Required: true
	// Enum: [Virtual Link Aggregation Group (LAG) 100BASE-TX (10/100ME) 1000BASE-T (1GE) 2.5GBASE-T (2.5GE) 5GBASE-T (5GE) 10GBASE-T (10GE) 10GBASE-CX4 (10GE) GBIC (1GE) SFP (1GE) SFP+ (10GE) XFP (10GE) XENPAK (10GE) X2 (10GE) SFP28 (25GE) QSFP+ (40GE) QSFP28 (50GE) CFP (100GE) CFP2 (100GE) CFP2 (200GE) CFP4 (100GE) Cisco CPAK (100GE) QSFP28 (100GE) QSFP56 (200GE) QSFP-DD (400GE) OSFP (400GE) IEEE 802.11a IEEE 802.11b/g IEEE 802.11n IEEE 802.11ac IEEE 802.11ad IEEE 802.11ax GSM CDMA LTE OC-3/STM-1 OC-12/STM-4 OC-48/STM-16 OC-192/STM-64 OC-768/STM-256 OC-1920/STM-640 OC-3840/STM-1234 SFP (1GFC) SFP (2GFC) SFP (4GFC) SFP+ (8GFC) SFP+ (16GFC) SFP28 (32GFC) QSFP28 (128GFC) SDR (2 Gbps) DDR (4 Gbps) QDR (8 Gbps) FDR10 (10 Gbps) FDR (13.5 Gbps) EDR (25 Gbps) HDR (50 Gbps) NDR (100 Gbps) XDR (250 Gbps) T1 (1.544 Mbps) E1 (2.048 Mbps) T3 (45 Mbps) E3 (34 Mbps) Cisco StackWise Cisco StackWise Plus Cisco FlexStack Cisco FlexStack Plus Juniper VCP Extreme SummitStack Extreme SummitStack-128 Extreme SummitStack-256 Extreme SummitStack-512 Other]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [virtual lag 100base-tx 1000base-t 2.5gbase-t 5gbase-t 10gbase-t 10gbase-cx4 1000base-x-gbic 1000base-x-sfp 10gbase-x-sfpp 10gbase-x-xfp 10gbase-x-xenpak 10gbase-x-x2 25gbase-x-sfp28 40gbase-x-qsfpp 50gbase-x-sfp28 100gbase-x-cfp 100gbase-x-cfp2 200gbase-x-cfp2 100gbase-x-cfp4 100gbase-x-cpak 100gbase-x-qsfp28 200gbase-x-qsfp56 400gbase-x-qsfpdd 400gbase-x-osfp ieee802.11a ieee802.11g ieee802.11n ieee802.11ac ieee802.11ad ieee802.11ax gsm cdma lte sonet-oc3 sonet-oc12 sonet-oc48 sonet-oc192 sonet-oc768 sonet-oc1920 sonet-oc3840 1gfc-sfp 2gfc-sfp 4gfc-sfp 8gfc-sfpp 16gfc-sfpp 32gfc-sfp28 128gfc-sfp28 inifiband-sdr inifiband-ddr inifiband-qdr inifiband-fdr10 inifiband-fdr inifiband-edr inifiband-hdr inifiband-ndr inifiband-xdr t1 e1 t3 e3 cisco-stackwise cisco-stackwise-plus cisco-flexstack cisco-flexstack-plus juniper-vcp extreme-summitstack extreme-summitstack-128 extreme-summitstack-256 extreme-summitstack-512 other]
	Value *string `json:"value"`
}

// Validate validates this device interface type
func (m *DeviceInterfaceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceInterfaceTypeTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Virtual","Link Aggregation Group (LAG)","100BASE-TX (10/100ME)","1000BASE-T (1GE)","2.5GBASE-T (2.5GE)","5GBASE-T (5GE)","10GBASE-T (10GE)","10GBASE-CX4 (10GE)","GBIC (1GE)","SFP (1GE)","SFP+ (10GE)","XFP (10GE)","XENPAK (10GE)","X2 (10GE)","SFP28 (25GE)","QSFP+ (40GE)","QSFP28 (50GE)","CFP (100GE)","CFP2 (100GE)","CFP2 (200GE)","CFP4 (100GE)","Cisco CPAK (100GE)","QSFP28 (100GE)","QSFP56 (200GE)","QSFP-DD (400GE)","OSFP (400GE)","IEEE 802.11a","IEEE 802.11b/g","IEEE 802.11n","IEEE 802.11ac","IEEE 802.11ad","IEEE 802.11ax","GSM","CDMA","LTE","OC-3/STM-1","OC-12/STM-4","OC-48/STM-16","OC-192/STM-64","OC-768/STM-256","OC-1920/STM-640","OC-3840/STM-1234","SFP (1GFC)","SFP (2GFC)","SFP (4GFC)","SFP+ (8GFC)","SFP+ (16GFC)","SFP28 (32GFC)","QSFP28 (128GFC)","SDR (2 Gbps)","DDR (4 Gbps)","QDR (8 Gbps)","FDR10 (10 Gbps)","FDR (13.5 Gbps)","EDR (25 Gbps)","HDR (50 Gbps)","NDR (100 Gbps)","XDR (250 Gbps)","T1 (1.544 Mbps)","E1 (2.048 Mbps)","T3 (45 Mbps)","E3 (34 Mbps)","Cisco StackWise","Cisco StackWise Plus","Cisco FlexStack","Cisco FlexStack Plus","Juniper VCP","Extreme SummitStack","Extreme SummitStack-128","Extreme SummitStack-256","Extreme SummitStack-512","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceInterfaceTypeTypeLabelPropEnum = append(deviceInterfaceTypeTypeLabelPropEnum, v)
	}
}

const (

	// DeviceInterfaceTypeLabelVirtual captures enum value "Virtual"
	DeviceInterfaceTypeLabelVirtual string = "Virtual"

	// DeviceInterfaceTypeLabelLinkAggregationGroupLAG captures enum value "Link Aggregation Group (LAG)"
	DeviceInterfaceTypeLabelLinkAggregationGroupLAG string = "Link Aggregation Group (LAG)"

	// DeviceInterfaceTypeLabelNr100BASETX10100ME captures enum value "100BASE-TX (10/100ME)"
	DeviceInterfaceTypeLabelNr100BASETX10100ME string = "100BASE-TX (10/100ME)"

	// DeviceInterfaceTypeLabelNr1000BASET1GE captures enum value "1000BASE-T (1GE)"
	DeviceInterfaceTypeLabelNr1000BASET1GE string = "1000BASE-T (1GE)"

	// DeviceInterfaceTypeLabelNr25GBASET25GE captures enum value "2.5GBASE-T (2.5GE)"
	DeviceInterfaceTypeLabelNr25GBASET25GE string = "2.5GBASE-T (2.5GE)"

	// DeviceInterfaceTypeLabelNr5GBASET5GE captures enum value "5GBASE-T (5GE)"
	DeviceInterfaceTypeLabelNr5GBASET5GE string = "5GBASE-T (5GE)"

	// DeviceInterfaceTypeLabelNr10GBASET10GE captures enum value "10GBASE-T (10GE)"
	DeviceInterfaceTypeLabelNr10GBASET10GE string = "10GBASE-T (10GE)"

	// DeviceInterfaceTypeLabelNr10GBASECX410GE captures enum value "10GBASE-CX4 (10GE)"
	DeviceInterfaceTypeLabelNr10GBASECX410GE string = "10GBASE-CX4 (10GE)"

	// DeviceInterfaceTypeLabelGBIC1GE captures enum value "GBIC (1GE)"
	DeviceInterfaceTypeLabelGBIC1GE string = "GBIC (1GE)"

	// DeviceInterfaceTypeLabelSFP1GE captures enum value "SFP (1GE)"
	DeviceInterfaceTypeLabelSFP1GE string = "SFP (1GE)"

	// DeviceInterfaceTypeLabelSFP10GE captures enum value "SFP+ (10GE)"
	DeviceInterfaceTypeLabelSFP10GE string = "SFP+ (10GE)"

	// DeviceInterfaceTypeLabelXFP10GE captures enum value "XFP (10GE)"
	DeviceInterfaceTypeLabelXFP10GE string = "XFP (10GE)"

	// DeviceInterfaceTypeLabelXENPAK10GE captures enum value "XENPAK (10GE)"
	DeviceInterfaceTypeLabelXENPAK10GE string = "XENPAK (10GE)"

	// DeviceInterfaceTypeLabelX210GE captures enum value "X2 (10GE)"
	DeviceInterfaceTypeLabelX210GE string = "X2 (10GE)"

	// DeviceInterfaceTypeLabelSFP2825GE captures enum value "SFP28 (25GE)"
	DeviceInterfaceTypeLabelSFP2825GE string = "SFP28 (25GE)"

	// DeviceInterfaceTypeLabelQSFP40GE captures enum value "QSFP+ (40GE)"
	DeviceInterfaceTypeLabelQSFP40GE string = "QSFP+ (40GE)"

	// DeviceInterfaceTypeLabelQSFP2850GE captures enum value "QSFP28 (50GE)"
	DeviceInterfaceTypeLabelQSFP2850GE string = "QSFP28 (50GE)"

	// DeviceInterfaceTypeLabelCFP100GE captures enum value "CFP (100GE)"
	DeviceInterfaceTypeLabelCFP100GE string = "CFP (100GE)"

	// DeviceInterfaceTypeLabelCFP2100GE captures enum value "CFP2 (100GE)"
	DeviceInterfaceTypeLabelCFP2100GE string = "CFP2 (100GE)"

	// DeviceInterfaceTypeLabelCFP2200GE captures enum value "CFP2 (200GE)"
	DeviceInterfaceTypeLabelCFP2200GE string = "CFP2 (200GE)"

	// DeviceInterfaceTypeLabelCFP4100GE captures enum value "CFP4 (100GE)"
	DeviceInterfaceTypeLabelCFP4100GE string = "CFP4 (100GE)"

	// DeviceInterfaceTypeLabelCiscoCPAK100GE captures enum value "Cisco CPAK (100GE)"
	DeviceInterfaceTypeLabelCiscoCPAK100GE string = "Cisco CPAK (100GE)"

	// DeviceInterfaceTypeLabelQSFP28100GE captures enum value "QSFP28 (100GE)"
	DeviceInterfaceTypeLabelQSFP28100GE string = "QSFP28 (100GE)"

	// DeviceInterfaceTypeLabelQSFP56200GE captures enum value "QSFP56 (200GE)"
	DeviceInterfaceTypeLabelQSFP56200GE string = "QSFP56 (200GE)"

	// DeviceInterfaceTypeLabelQSFPDD400GE captures enum value "QSFP-DD (400GE)"
	DeviceInterfaceTypeLabelQSFPDD400GE string = "QSFP-DD (400GE)"

	// DeviceInterfaceTypeLabelOSFP400GE captures enum value "OSFP (400GE)"
	DeviceInterfaceTypeLabelOSFP400GE string = "OSFP (400GE)"

	// DeviceInterfaceTypeLabelIEEE80211a captures enum value "IEEE 802.11a"
	DeviceInterfaceTypeLabelIEEE80211a string = "IEEE 802.11a"

	// DeviceInterfaceTypeLabelIEEE80211bg captures enum value "IEEE 802.11b/g"
	DeviceInterfaceTypeLabelIEEE80211bg string = "IEEE 802.11b/g"

	// DeviceInterfaceTypeLabelIEEE80211n captures enum value "IEEE 802.11n"
	DeviceInterfaceTypeLabelIEEE80211n string = "IEEE 802.11n"

	// DeviceInterfaceTypeLabelIEEE80211ac captures enum value "IEEE 802.11ac"
	DeviceInterfaceTypeLabelIEEE80211ac string = "IEEE 802.11ac"

	// DeviceInterfaceTypeLabelIEEE80211ad captures enum value "IEEE 802.11ad"
	DeviceInterfaceTypeLabelIEEE80211ad string = "IEEE 802.11ad"

	// DeviceInterfaceTypeLabelIEEE80211ax captures enum value "IEEE 802.11ax"
	DeviceInterfaceTypeLabelIEEE80211ax string = "IEEE 802.11ax"

	// DeviceInterfaceTypeLabelGSM captures enum value "GSM"
	DeviceInterfaceTypeLabelGSM string = "GSM"

	// DeviceInterfaceTypeLabelCDMA captures enum value "CDMA"
	DeviceInterfaceTypeLabelCDMA string = "CDMA"

	// DeviceInterfaceTypeLabelLTE captures enum value "LTE"
	DeviceInterfaceTypeLabelLTE string = "LTE"

	// DeviceInterfaceTypeLabelOC3STM1 captures enum value "OC-3/STM-1"
	DeviceInterfaceTypeLabelOC3STM1 string = "OC-3/STM-1"

	// DeviceInterfaceTypeLabelOC12STM4 captures enum value "OC-12/STM-4"
	DeviceInterfaceTypeLabelOC12STM4 string = "OC-12/STM-4"

	// DeviceInterfaceTypeLabelOC48STM16 captures enum value "OC-48/STM-16"
	DeviceInterfaceTypeLabelOC48STM16 string = "OC-48/STM-16"

	// DeviceInterfaceTypeLabelOC192STM64 captures enum value "OC-192/STM-64"
	DeviceInterfaceTypeLabelOC192STM64 string = "OC-192/STM-64"

	// DeviceInterfaceTypeLabelOC768STM256 captures enum value "OC-768/STM-256"
	DeviceInterfaceTypeLabelOC768STM256 string = "OC-768/STM-256"

	// DeviceInterfaceTypeLabelOC1920STM640 captures enum value "OC-1920/STM-640"
	DeviceInterfaceTypeLabelOC1920STM640 string = "OC-1920/STM-640"

	// DeviceInterfaceTypeLabelOC3840STM1234 captures enum value "OC-3840/STM-1234"
	DeviceInterfaceTypeLabelOC3840STM1234 string = "OC-3840/STM-1234"

	// DeviceInterfaceTypeLabelSFP1GFC captures enum value "SFP (1GFC)"
	DeviceInterfaceTypeLabelSFP1GFC string = "SFP (1GFC)"

	// DeviceInterfaceTypeLabelSFP2GFC captures enum value "SFP (2GFC)"
	DeviceInterfaceTypeLabelSFP2GFC string = "SFP (2GFC)"

	// DeviceInterfaceTypeLabelSFP4GFC captures enum value "SFP (4GFC)"
	DeviceInterfaceTypeLabelSFP4GFC string = "SFP (4GFC)"

	// DeviceInterfaceTypeLabelSFP8GFC captures enum value "SFP+ (8GFC)"
	DeviceInterfaceTypeLabelSFP8GFC string = "SFP+ (8GFC)"

	// DeviceInterfaceTypeLabelSFP16GFC captures enum value "SFP+ (16GFC)"
	DeviceInterfaceTypeLabelSFP16GFC string = "SFP+ (16GFC)"

	// DeviceInterfaceTypeLabelSFP2832GFC captures enum value "SFP28 (32GFC)"
	DeviceInterfaceTypeLabelSFP2832GFC string = "SFP28 (32GFC)"

	// DeviceInterfaceTypeLabelQSFP28128GFC captures enum value "QSFP28 (128GFC)"
	DeviceInterfaceTypeLabelQSFP28128GFC string = "QSFP28 (128GFC)"

	// DeviceInterfaceTypeLabelSDR2Gbps captures enum value "SDR (2 Gbps)"
	DeviceInterfaceTypeLabelSDR2Gbps string = "SDR (2 Gbps)"

	// DeviceInterfaceTypeLabelDDR4Gbps captures enum value "DDR (4 Gbps)"
	DeviceInterfaceTypeLabelDDR4Gbps string = "DDR (4 Gbps)"

	// DeviceInterfaceTypeLabelQDR8Gbps captures enum value "QDR (8 Gbps)"
	DeviceInterfaceTypeLabelQDR8Gbps string = "QDR (8 Gbps)"

	// DeviceInterfaceTypeLabelFDR1010Gbps captures enum value "FDR10 (10 Gbps)"
	DeviceInterfaceTypeLabelFDR1010Gbps string = "FDR10 (10 Gbps)"

	// DeviceInterfaceTypeLabelFDR135Gbps captures enum value "FDR (13.5 Gbps)"
	DeviceInterfaceTypeLabelFDR135Gbps string = "FDR (13.5 Gbps)"

	// DeviceInterfaceTypeLabelEDR25Gbps captures enum value "EDR (25 Gbps)"
	DeviceInterfaceTypeLabelEDR25Gbps string = "EDR (25 Gbps)"

	// DeviceInterfaceTypeLabelHDR50Gbps captures enum value "HDR (50 Gbps)"
	DeviceInterfaceTypeLabelHDR50Gbps string = "HDR (50 Gbps)"

	// DeviceInterfaceTypeLabelNDR100Gbps captures enum value "NDR (100 Gbps)"
	DeviceInterfaceTypeLabelNDR100Gbps string = "NDR (100 Gbps)"

	// DeviceInterfaceTypeLabelXDR250Gbps captures enum value "XDR (250 Gbps)"
	DeviceInterfaceTypeLabelXDR250Gbps string = "XDR (250 Gbps)"

	// DeviceInterfaceTypeLabelT11544Mbps captures enum value "T1 (1.544 Mbps)"
	DeviceInterfaceTypeLabelT11544Mbps string = "T1 (1.544 Mbps)"

	// DeviceInterfaceTypeLabelE12048Mbps captures enum value "E1 (2.048 Mbps)"
	DeviceInterfaceTypeLabelE12048Mbps string = "E1 (2.048 Mbps)"

	// DeviceInterfaceTypeLabelT345Mbps captures enum value "T3 (45 Mbps)"
	DeviceInterfaceTypeLabelT345Mbps string = "T3 (45 Mbps)"

	// DeviceInterfaceTypeLabelE334Mbps captures enum value "E3 (34 Mbps)"
	DeviceInterfaceTypeLabelE334Mbps string = "E3 (34 Mbps)"

	// DeviceInterfaceTypeLabelCiscoStackWise captures enum value "Cisco StackWise"
	DeviceInterfaceTypeLabelCiscoStackWise string = "Cisco StackWise"

	// DeviceInterfaceTypeLabelCiscoStackWisePlus captures enum value "Cisco StackWise Plus"
	DeviceInterfaceTypeLabelCiscoStackWisePlus string = "Cisco StackWise Plus"

	// DeviceInterfaceTypeLabelCiscoFlexStack captures enum value "Cisco FlexStack"
	DeviceInterfaceTypeLabelCiscoFlexStack string = "Cisco FlexStack"

	// DeviceInterfaceTypeLabelCiscoFlexStackPlus captures enum value "Cisco FlexStack Plus"
	DeviceInterfaceTypeLabelCiscoFlexStackPlus string = "Cisco FlexStack Plus"

	// DeviceInterfaceTypeLabelJuniperVCP captures enum value "Juniper VCP"
	DeviceInterfaceTypeLabelJuniperVCP string = "Juniper VCP"

	// DeviceInterfaceTypeLabelExtremeSummitStack captures enum value "Extreme SummitStack"
	DeviceInterfaceTypeLabelExtremeSummitStack string = "Extreme SummitStack"

	// DeviceInterfaceTypeLabelExtremeSummitStack128 captures enum value "Extreme SummitStack-128"
	DeviceInterfaceTypeLabelExtremeSummitStack128 string = "Extreme SummitStack-128"

	// DeviceInterfaceTypeLabelExtremeSummitStack256 captures enum value "Extreme SummitStack-256"
	DeviceInterfaceTypeLabelExtremeSummitStack256 string = "Extreme SummitStack-256"

	// DeviceInterfaceTypeLabelExtremeSummitStack512 captures enum value "Extreme SummitStack-512"
	DeviceInterfaceTypeLabelExtremeSummitStack512 string = "Extreme SummitStack-512"

	// DeviceInterfaceTypeLabelOther captures enum value "Other"
	DeviceInterfaceTypeLabelOther string = "Other"
)

// prop value enum
func (m *DeviceInterfaceType) validateLabelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceInterfaceTypeTypeLabelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceInterfaceType) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var deviceInterfaceTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["virtual","lag","100base-tx","1000base-t","2.5gbase-t","5gbase-t","10gbase-t","10gbase-cx4","1000base-x-gbic","1000base-x-sfp","10gbase-x-sfpp","10gbase-x-xfp","10gbase-x-xenpak","10gbase-x-x2","25gbase-x-sfp28","40gbase-x-qsfpp","50gbase-x-sfp28","100gbase-x-cfp","100gbase-x-cfp2","200gbase-x-cfp2","100gbase-x-cfp4","100gbase-x-cpak","100gbase-x-qsfp28","200gbase-x-qsfp56","400gbase-x-qsfpdd","400gbase-x-osfp","ieee802.11a","ieee802.11g","ieee802.11n","ieee802.11ac","ieee802.11ad","ieee802.11ax","gsm","cdma","lte","sonet-oc3","sonet-oc12","sonet-oc48","sonet-oc192","sonet-oc768","sonet-oc1920","sonet-oc3840","1gfc-sfp","2gfc-sfp","4gfc-sfp","8gfc-sfpp","16gfc-sfpp","32gfc-sfp28","128gfc-sfp28","inifiband-sdr","inifiband-ddr","inifiband-qdr","inifiband-fdr10","inifiband-fdr","inifiband-edr","inifiband-hdr","inifiband-ndr","inifiband-xdr","t1","e1","t3","e3","cisco-stackwise","cisco-stackwise-plus","cisco-flexstack","cisco-flexstack-plus","juniper-vcp","extreme-summitstack","extreme-summitstack-128","extreme-summitstack-256","extreme-summitstack-512","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceInterfaceTypeTypeValuePropEnum = append(deviceInterfaceTypeTypeValuePropEnum, v)
	}
}

const (

	// DeviceInterfaceTypeValueVirtual captures enum value "virtual"
	DeviceInterfaceTypeValueVirtual string = "virtual"

	// DeviceInterfaceTypeValueLag captures enum value "lag"
	DeviceInterfaceTypeValueLag string = "lag"

	// DeviceInterfaceTypeValueNr100baseTx captures enum value "100base-tx"
	DeviceInterfaceTypeValueNr100baseTx string = "100base-tx"

	// DeviceInterfaceTypeValueNr1000baset captures enum value "1000base-t"
	DeviceInterfaceTypeValueNr1000baset string = "1000base-t"

	// DeviceInterfaceTypeValueNr25gbaset captures enum value "2.5gbase-t"
	DeviceInterfaceTypeValueNr25gbaset string = "2.5gbase-t"

	// DeviceInterfaceTypeValueNr5gbaset captures enum value "5gbase-t"
	DeviceInterfaceTypeValueNr5gbaset string = "5gbase-t"

	// DeviceInterfaceTypeValueNr10gbaset captures enum value "10gbase-t"
	DeviceInterfaceTypeValueNr10gbaset string = "10gbase-t"

	// DeviceInterfaceTypeValueNr10gbaseCx4 captures enum value "10gbase-cx4"
	DeviceInterfaceTypeValueNr10gbaseCx4 string = "10gbase-cx4"

	// DeviceInterfaceTypeValueNr1000basexGbic captures enum value "1000base-x-gbic"
	DeviceInterfaceTypeValueNr1000basexGbic string = "1000base-x-gbic"

	// DeviceInterfaceTypeValueNr1000basexSfp captures enum value "1000base-x-sfp"
	DeviceInterfaceTypeValueNr1000basexSfp string = "1000base-x-sfp"

	// DeviceInterfaceTypeValueNr10gbasexSfpp captures enum value "10gbase-x-sfpp"
	DeviceInterfaceTypeValueNr10gbasexSfpp string = "10gbase-x-sfpp"

	// DeviceInterfaceTypeValueNr10gbasexXfp captures enum value "10gbase-x-xfp"
	DeviceInterfaceTypeValueNr10gbasexXfp string = "10gbase-x-xfp"

	// DeviceInterfaceTypeValueNr10gbasexXenpak captures enum value "10gbase-x-xenpak"
	DeviceInterfaceTypeValueNr10gbasexXenpak string = "10gbase-x-xenpak"

	// DeviceInterfaceTypeValueNr10gbasexX2 captures enum value "10gbase-x-x2"
	DeviceInterfaceTypeValueNr10gbasexX2 string = "10gbase-x-x2"

	// DeviceInterfaceTypeValueNr25gbasexSfp28 captures enum value "25gbase-x-sfp28"
	DeviceInterfaceTypeValueNr25gbasexSfp28 string = "25gbase-x-sfp28"

	// DeviceInterfaceTypeValueNr40gbasexQsfpp captures enum value "40gbase-x-qsfpp"
	DeviceInterfaceTypeValueNr40gbasexQsfpp string = "40gbase-x-qsfpp"

	// DeviceInterfaceTypeValueNr50gbasexSfp28 captures enum value "50gbase-x-sfp28"
	DeviceInterfaceTypeValueNr50gbasexSfp28 string = "50gbase-x-sfp28"

	// DeviceInterfaceTypeValueNr100gbasexCfp captures enum value "100gbase-x-cfp"
	DeviceInterfaceTypeValueNr100gbasexCfp string = "100gbase-x-cfp"

	// DeviceInterfaceTypeValueNr100gbasexCfp2 captures enum value "100gbase-x-cfp2"
	DeviceInterfaceTypeValueNr100gbasexCfp2 string = "100gbase-x-cfp2"

	// DeviceInterfaceTypeValueNr200gbasexCfp2 captures enum value "200gbase-x-cfp2"
	DeviceInterfaceTypeValueNr200gbasexCfp2 string = "200gbase-x-cfp2"

	// DeviceInterfaceTypeValueNr100gbasexCfp4 captures enum value "100gbase-x-cfp4"
	DeviceInterfaceTypeValueNr100gbasexCfp4 string = "100gbase-x-cfp4"

	// DeviceInterfaceTypeValueNr100gbasexCpak captures enum value "100gbase-x-cpak"
	DeviceInterfaceTypeValueNr100gbasexCpak string = "100gbase-x-cpak"

	// DeviceInterfaceTypeValueNr100gbasexQsfp28 captures enum value "100gbase-x-qsfp28"
	DeviceInterfaceTypeValueNr100gbasexQsfp28 string = "100gbase-x-qsfp28"

	// DeviceInterfaceTypeValueNr200gbasexQsfp56 captures enum value "200gbase-x-qsfp56"
	DeviceInterfaceTypeValueNr200gbasexQsfp56 string = "200gbase-x-qsfp56"

	// DeviceInterfaceTypeValueNr400gbasexQsfpdd captures enum value "400gbase-x-qsfpdd"
	DeviceInterfaceTypeValueNr400gbasexQsfpdd string = "400gbase-x-qsfpdd"

	// DeviceInterfaceTypeValueNr400gbasexOsfp captures enum value "400gbase-x-osfp"
	DeviceInterfaceTypeValueNr400gbasexOsfp string = "400gbase-x-osfp"

	// DeviceInterfaceTypeValueIeee80211a captures enum value "ieee802.11a"
	DeviceInterfaceTypeValueIeee80211a string = "ieee802.11a"

	// DeviceInterfaceTypeValueIeee80211g captures enum value "ieee802.11g"
	DeviceInterfaceTypeValueIeee80211g string = "ieee802.11g"

	// DeviceInterfaceTypeValueIeee80211n captures enum value "ieee802.11n"
	DeviceInterfaceTypeValueIeee80211n string = "ieee802.11n"

	// DeviceInterfaceTypeValueIeee80211ac captures enum value "ieee802.11ac"
	DeviceInterfaceTypeValueIeee80211ac string = "ieee802.11ac"

	// DeviceInterfaceTypeValueIeee80211ad captures enum value "ieee802.11ad"
	DeviceInterfaceTypeValueIeee80211ad string = "ieee802.11ad"

	// DeviceInterfaceTypeValueIeee80211ax captures enum value "ieee802.11ax"
	DeviceInterfaceTypeValueIeee80211ax string = "ieee802.11ax"

	// DeviceInterfaceTypeValueGsm captures enum value "gsm"
	DeviceInterfaceTypeValueGsm string = "gsm"

	// DeviceInterfaceTypeValueCdma captures enum value "cdma"
	DeviceInterfaceTypeValueCdma string = "cdma"

	// DeviceInterfaceTypeValueLte captures enum value "lte"
	DeviceInterfaceTypeValueLte string = "lte"

	// DeviceInterfaceTypeValueSonetOc3 captures enum value "sonet-oc3"
	DeviceInterfaceTypeValueSonetOc3 string = "sonet-oc3"

	// DeviceInterfaceTypeValueSonetOc12 captures enum value "sonet-oc12"
	DeviceInterfaceTypeValueSonetOc12 string = "sonet-oc12"

	// DeviceInterfaceTypeValueSonetOc48 captures enum value "sonet-oc48"
	DeviceInterfaceTypeValueSonetOc48 string = "sonet-oc48"

	// DeviceInterfaceTypeValueSonetOc192 captures enum value "sonet-oc192"
	DeviceInterfaceTypeValueSonetOc192 string = "sonet-oc192"

	// DeviceInterfaceTypeValueSonetOc768 captures enum value "sonet-oc768"
	DeviceInterfaceTypeValueSonetOc768 string = "sonet-oc768"

	// DeviceInterfaceTypeValueSonetOc1920 captures enum value "sonet-oc1920"
	DeviceInterfaceTypeValueSonetOc1920 string = "sonet-oc1920"

	// DeviceInterfaceTypeValueSonetOc3840 captures enum value "sonet-oc3840"
	DeviceInterfaceTypeValueSonetOc3840 string = "sonet-oc3840"

	// DeviceInterfaceTypeValueNr1gfcSfp captures enum value "1gfc-sfp"
	DeviceInterfaceTypeValueNr1gfcSfp string = "1gfc-sfp"

	// DeviceInterfaceTypeValueNr2gfcSfp captures enum value "2gfc-sfp"
	DeviceInterfaceTypeValueNr2gfcSfp string = "2gfc-sfp"

	// DeviceInterfaceTypeValueNr4gfcSfp captures enum value "4gfc-sfp"
	DeviceInterfaceTypeValueNr4gfcSfp string = "4gfc-sfp"

	// DeviceInterfaceTypeValueNr8gfcSfpp captures enum value "8gfc-sfpp"
	DeviceInterfaceTypeValueNr8gfcSfpp string = "8gfc-sfpp"

	// DeviceInterfaceTypeValueNr16gfcSfpp captures enum value "16gfc-sfpp"
	DeviceInterfaceTypeValueNr16gfcSfpp string = "16gfc-sfpp"

	// DeviceInterfaceTypeValueNr32gfcSfp28 captures enum value "32gfc-sfp28"
	DeviceInterfaceTypeValueNr32gfcSfp28 string = "32gfc-sfp28"

	// DeviceInterfaceTypeValueNr128gfcSfp28 captures enum value "128gfc-sfp28"
	DeviceInterfaceTypeValueNr128gfcSfp28 string = "128gfc-sfp28"

	// DeviceInterfaceTypeValueInifibandSdr captures enum value "inifiband-sdr"
	DeviceInterfaceTypeValueInifibandSdr string = "inifiband-sdr"

	// DeviceInterfaceTypeValueInifibandDdr captures enum value "inifiband-ddr"
	DeviceInterfaceTypeValueInifibandDdr string = "inifiband-ddr"

	// DeviceInterfaceTypeValueInifibandQdr captures enum value "inifiband-qdr"
	DeviceInterfaceTypeValueInifibandQdr string = "inifiband-qdr"

	// DeviceInterfaceTypeValueInifibandFdr10 captures enum value "inifiband-fdr10"
	DeviceInterfaceTypeValueInifibandFdr10 string = "inifiband-fdr10"

	// DeviceInterfaceTypeValueInifibandFdr captures enum value "inifiband-fdr"
	DeviceInterfaceTypeValueInifibandFdr string = "inifiband-fdr"

	// DeviceInterfaceTypeValueInifibandEdr captures enum value "inifiband-edr"
	DeviceInterfaceTypeValueInifibandEdr string = "inifiband-edr"

	// DeviceInterfaceTypeValueInifibandHdr captures enum value "inifiband-hdr"
	DeviceInterfaceTypeValueInifibandHdr string = "inifiband-hdr"

	// DeviceInterfaceTypeValueInifibandNdr captures enum value "inifiband-ndr"
	DeviceInterfaceTypeValueInifibandNdr string = "inifiband-ndr"

	// DeviceInterfaceTypeValueInifibandXdr captures enum value "inifiband-xdr"
	DeviceInterfaceTypeValueInifibandXdr string = "inifiband-xdr"

	// DeviceInterfaceTypeValueT1 captures enum value "t1"
	DeviceInterfaceTypeValueT1 string = "t1"

	// DeviceInterfaceTypeValueE1 captures enum value "e1"
	DeviceInterfaceTypeValueE1 string = "e1"

	// DeviceInterfaceTypeValueT3 captures enum value "t3"
	DeviceInterfaceTypeValueT3 string = "t3"

	// DeviceInterfaceTypeValueE3 captures enum value "e3"
	DeviceInterfaceTypeValueE3 string = "e3"

	// DeviceInterfaceTypeValueCiscoStackwise captures enum value "cisco-stackwise"
	DeviceInterfaceTypeValueCiscoStackwise string = "cisco-stackwise"

	// DeviceInterfaceTypeValueCiscoStackwisePlus captures enum value "cisco-stackwise-plus"
	DeviceInterfaceTypeValueCiscoStackwisePlus string = "cisco-stackwise-plus"

	// DeviceInterfaceTypeValueCiscoFlexstack captures enum value "cisco-flexstack"
	DeviceInterfaceTypeValueCiscoFlexstack string = "cisco-flexstack"

	// DeviceInterfaceTypeValueCiscoFlexstackPlus captures enum value "cisco-flexstack-plus"
	DeviceInterfaceTypeValueCiscoFlexstackPlus string = "cisco-flexstack-plus"

	// DeviceInterfaceTypeValueJuniperVcp captures enum value "juniper-vcp"
	DeviceInterfaceTypeValueJuniperVcp string = "juniper-vcp"

	// DeviceInterfaceTypeValueExtremeSummitstack captures enum value "extreme-summitstack"
	DeviceInterfaceTypeValueExtremeSummitstack string = "extreme-summitstack"

	// DeviceInterfaceTypeValueExtremeSummitstack128 captures enum value "extreme-summitstack-128"
	DeviceInterfaceTypeValueExtremeSummitstack128 string = "extreme-summitstack-128"

	// DeviceInterfaceTypeValueExtremeSummitstack256 captures enum value "extreme-summitstack-256"
	DeviceInterfaceTypeValueExtremeSummitstack256 string = "extreme-summitstack-256"

	// DeviceInterfaceTypeValueExtremeSummitstack512 captures enum value "extreme-summitstack-512"
	DeviceInterfaceTypeValueExtremeSummitstack512 string = "extreme-summitstack-512"

	// DeviceInterfaceTypeValueOther captures enum value "other"
	DeviceInterfaceTypeValueOther string = "other"
)

// prop value enum
func (m *DeviceInterfaceType) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceInterfaceTypeTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceInterfaceType) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceInterfaceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceInterfaceType) UnmarshalBinary(b []byte) error {
	var res DeviceInterfaceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
