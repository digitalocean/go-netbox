// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachineWithConfigContextStatus Status
//
// swagger:model virtualMachineWithConfigContextStatus
type VirtualMachineWithConfigContextStatus struct {

	// label
	// Required: true
	// Enum: [Offline Active Planned Staged Failed Decommissioning]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [offline active planned staged failed decommissioning]
	Value *string `json:"value"`
}

// Validate validates this virtual machine with config context status
func (m *VirtualMachineWithConfigContextStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var virtualMachineWithConfigContextStatusTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Offline","Active","Planned","Staged","Failed","Decommissioning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualMachineWithConfigContextStatusTypeLabelPropEnum = append(virtualMachineWithConfigContextStatusTypeLabelPropEnum, v)
	}
}

const (

	// VirtualMachineWithConfigContextStatusLabelOffline captures enum value "Offline"
	VirtualMachineWithConfigContextStatusLabelOffline string = "Offline"

	// VirtualMachineWithConfigContextStatusLabelActive captures enum value "Active"
	VirtualMachineWithConfigContextStatusLabelActive string = "Active"

	// VirtualMachineWithConfigContextStatusLabelPlanned captures enum value "Planned"
	VirtualMachineWithConfigContextStatusLabelPlanned string = "Planned"

	// VirtualMachineWithConfigContextStatusLabelStaged captures enum value "Staged"
	VirtualMachineWithConfigContextStatusLabelStaged string = "Staged"

	// VirtualMachineWithConfigContextStatusLabelFailed captures enum value "Failed"
	VirtualMachineWithConfigContextStatusLabelFailed string = "Failed"

	// VirtualMachineWithConfigContextStatusLabelDecommissioning captures enum value "Decommissioning"
	VirtualMachineWithConfigContextStatusLabelDecommissioning string = "Decommissioning"
)

// prop value enum
func (m *VirtualMachineWithConfigContextStatus) validateLabelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualMachineWithConfigContextStatusTypeLabelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualMachineWithConfigContextStatus) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var virtualMachineWithConfigContextStatusTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["offline","active","planned","staged","failed","decommissioning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualMachineWithConfigContextStatusTypeValuePropEnum = append(virtualMachineWithConfigContextStatusTypeValuePropEnum, v)
	}
}

const (

	// VirtualMachineWithConfigContextStatusValueOffline captures enum value "offline"
	VirtualMachineWithConfigContextStatusValueOffline string = "offline"

	// VirtualMachineWithConfigContextStatusValueActive captures enum value "active"
	VirtualMachineWithConfigContextStatusValueActive string = "active"

	// VirtualMachineWithConfigContextStatusValuePlanned captures enum value "planned"
	VirtualMachineWithConfigContextStatusValuePlanned string = "planned"

	// VirtualMachineWithConfigContextStatusValueStaged captures enum value "staged"
	VirtualMachineWithConfigContextStatusValueStaged string = "staged"

	// VirtualMachineWithConfigContextStatusValueFailed captures enum value "failed"
	VirtualMachineWithConfigContextStatusValueFailed string = "failed"

	// VirtualMachineWithConfigContextStatusValueDecommissioning captures enum value "decommissioning"
	VirtualMachineWithConfigContextStatusValueDecommissioning string = "decommissioning"
)

// prop value enum
func (m *VirtualMachineWithConfigContextStatus) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualMachineWithConfigContextStatusTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualMachineWithConfigContextStatus) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineWithConfigContextStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineWithConfigContextStatus) UnmarshalBinary(b []byte) error {
	var res VirtualMachineWithConfigContextStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
