// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RackType Type
//
// swagger:model rackType
type RackType struct {

	// label
	// Required: true
	// Enum: [2-post frame 4-post frame 4-post cabinet Wall-mounted frame Wall-mounted cabinet]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [2-post-frame 4-post-frame 4-post-cabinet wall-frame wall-cabinet]
	Value *string `json:"value"`
}

// Validate validates this rack type
func (m *RackType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rackTypeTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2-post frame","4-post frame","4-post cabinet","Wall-mounted frame","Wall-mounted cabinet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rackTypeTypeLabelPropEnum = append(rackTypeTypeLabelPropEnum, v)
	}
}

const (

	// RackTypeLabelNr2PostFrame captures enum value "2-post frame"
	RackTypeLabelNr2PostFrame string = "2-post frame"

	// RackTypeLabelNr4PostFrame captures enum value "4-post frame"
	RackTypeLabelNr4PostFrame string = "4-post frame"

	// RackTypeLabelNr4PostCabinet captures enum value "4-post cabinet"
	RackTypeLabelNr4PostCabinet string = "4-post cabinet"

	// RackTypeLabelWallMountedFrame captures enum value "Wall-mounted frame"
	RackTypeLabelWallMountedFrame string = "Wall-mounted frame"

	// RackTypeLabelWallMountedCabinet captures enum value "Wall-mounted cabinet"
	RackTypeLabelWallMountedCabinet string = "Wall-mounted cabinet"
)

// prop value enum
func (m *RackType) validateLabelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rackTypeTypeLabelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RackType) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var rackTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2-post-frame","4-post-frame","4-post-cabinet","wall-frame","wall-cabinet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rackTypeTypeValuePropEnum = append(rackTypeTypeValuePropEnum, v)
	}
}

const (

	// RackTypeValueNr2PostFrame captures enum value "2-post-frame"
	RackTypeValueNr2PostFrame string = "2-post-frame"

	// RackTypeValueNr4PostFrame captures enum value "4-post-frame"
	RackTypeValueNr4PostFrame string = "4-post-frame"

	// RackTypeValueNr4PostCabinet captures enum value "4-post-cabinet"
	RackTypeValueNr4PostCabinet string = "4-post-cabinet"

	// RackTypeValueWallFrame captures enum value "wall-frame"
	RackTypeValueWallFrame string = "wall-frame"

	// RackTypeValueWallCabinet captures enum value "wall-cabinet"
	RackTypeValueWallCabinet string = "wall-cabinet"
)

// prop value enum
func (m *RackType) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rackTypeTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RackType) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RackType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RackType) UnmarshalBinary(b []byte) error {
	var res RackType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
