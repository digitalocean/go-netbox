// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CircuitStatus Status
//
// swagger:model circuitStatus
type CircuitStatus struct {

	// label
	// Required: true
	// Enum: [Planned Provisioning Active Offline Deprovisioning Decommissioned]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [planned provisioning active offline deprovisioning decommissioned]
	Value *string `json:"value"`
}

// Validate validates this circuit status
func (m *CircuitStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var circuitStatusTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Planned","Provisioning","Active","Offline","Deprovisioning","Decommissioned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		circuitStatusTypeLabelPropEnum = append(circuitStatusTypeLabelPropEnum, v)
	}
}

const (

	// CircuitStatusLabelPlanned captures enum value "Planned"
	CircuitStatusLabelPlanned string = "Planned"

	// CircuitStatusLabelProvisioning captures enum value "Provisioning"
	CircuitStatusLabelProvisioning string = "Provisioning"

	// CircuitStatusLabelActive captures enum value "Active"
	CircuitStatusLabelActive string = "Active"

	// CircuitStatusLabelOffline captures enum value "Offline"
	CircuitStatusLabelOffline string = "Offline"

	// CircuitStatusLabelDeprovisioning captures enum value "Deprovisioning"
	CircuitStatusLabelDeprovisioning string = "Deprovisioning"

	// CircuitStatusLabelDecommissioned captures enum value "Decommissioned"
	CircuitStatusLabelDecommissioned string = "Decommissioned"
)

// prop value enum
func (m *CircuitStatus) validateLabelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, circuitStatusTypeLabelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CircuitStatus) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var circuitStatusTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["planned","provisioning","active","offline","deprovisioning","decommissioned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		circuitStatusTypeValuePropEnum = append(circuitStatusTypeValuePropEnum, v)
	}
}

const (

	// CircuitStatusValuePlanned captures enum value "planned"
	CircuitStatusValuePlanned string = "planned"

	// CircuitStatusValueProvisioning captures enum value "provisioning"
	CircuitStatusValueProvisioning string = "provisioning"

	// CircuitStatusValueActive captures enum value "active"
	CircuitStatusValueActive string = "active"

	// CircuitStatusValueOffline captures enum value "offline"
	CircuitStatusValueOffline string = "offline"

	// CircuitStatusValueDeprovisioning captures enum value "deprovisioning"
	CircuitStatusValueDeprovisioning string = "deprovisioning"

	// CircuitStatusValueDecommissioned captures enum value "decommissioned"
	CircuitStatusValueDecommissioned string = "decommissioned"
)

// prop value enum
func (m *CircuitStatus) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, circuitStatusTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CircuitStatus) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CircuitStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CircuitStatus) UnmarshalBinary(b []byte) error {
	var res CircuitStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
