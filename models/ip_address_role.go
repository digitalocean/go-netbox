// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPAddressRole Role
//
// swagger:model ipAddressRole
type IPAddressRole struct {

	// label
	// Required: true
	// Enum: [Loopback Secondary Anycast VIP VRRP HSRP GLBP CARP]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [loopback secondary anycast vip vrrp hsrp glbp carp]
	Value *string `json:"value"`
}

// Validate validates this ip address role
func (m *IPAddressRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ipAddressRoleTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Loopback","Secondary","Anycast","VIP","VRRP","HSRP","GLBP","CARP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipAddressRoleTypeLabelPropEnum = append(ipAddressRoleTypeLabelPropEnum, v)
	}
}

const (

	// IPAddressRoleLabelLoopback captures enum value "Loopback"
	IPAddressRoleLabelLoopback string = "Loopback"

	// IPAddressRoleLabelSecondary captures enum value "Secondary"
	IPAddressRoleLabelSecondary string = "Secondary"

	// IPAddressRoleLabelAnycast captures enum value "Anycast"
	IPAddressRoleLabelAnycast string = "Anycast"

	// IPAddressRoleLabelVIP captures enum value "VIP"
	IPAddressRoleLabelVIP string = "VIP"

	// IPAddressRoleLabelVRRP captures enum value "VRRP"
	IPAddressRoleLabelVRRP string = "VRRP"

	// IPAddressRoleLabelHSRP captures enum value "HSRP"
	IPAddressRoleLabelHSRP string = "HSRP"

	// IPAddressRoleLabelGLBP captures enum value "GLBP"
	IPAddressRoleLabelGLBP string = "GLBP"

	// IPAddressRoleLabelCARP captures enum value "CARP"
	IPAddressRoleLabelCARP string = "CARP"
)

// prop value enum
func (m *IPAddressRole) validateLabelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipAddressRoleTypeLabelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPAddressRole) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var ipAddressRoleTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["loopback","secondary","anycast","vip","vrrp","hsrp","glbp","carp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipAddressRoleTypeValuePropEnum = append(ipAddressRoleTypeValuePropEnum, v)
	}
}

const (

	// IPAddressRoleValueLoopback captures enum value "loopback"
	IPAddressRoleValueLoopback string = "loopback"

	// IPAddressRoleValueSecondary captures enum value "secondary"
	IPAddressRoleValueSecondary string = "secondary"

	// IPAddressRoleValueAnycast captures enum value "anycast"
	IPAddressRoleValueAnycast string = "anycast"

	// IPAddressRoleValueVip captures enum value "vip"
	IPAddressRoleValueVip string = "vip"

	// IPAddressRoleValueVrrp captures enum value "vrrp"
	IPAddressRoleValueVrrp string = "vrrp"

	// IPAddressRoleValueHsrp captures enum value "hsrp"
	IPAddressRoleValueHsrp string = "hsrp"

	// IPAddressRoleValueGlbp captures enum value "glbp"
	IPAddressRoleValueGlbp string = "glbp"

	// IPAddressRoleValueCarp captures enum value "carp"
	IPAddressRoleValueCarp string = "carp"
)

// prop value enum
func (m *IPAddressRole) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipAddressRoleTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPAddressRole) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAddressRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAddressRole) UnmarshalBinary(b []byte) error {
	var res IPAddressRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
