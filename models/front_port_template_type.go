// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FrontPortTemplateType Type
//
// swagger:model frontPortTemplateType
type FrontPortTemplateType struct {

	// label
	// Required: true
	// Enum: [8P8C 110 Punch BNC MRJ21 FC LC LC/APC LSH LSH/APC MPO MTRJ SC SC/APC ST]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [8p8c 110-punch bnc mrj21 fc lc lc-apc lsh lsh-apc mpo mtrj sc sc-apc st]
	Value *string `json:"value"`
}

// Validate validates this front port template type
func (m *FrontPortTemplateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var frontPortTemplateTypeTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["8P8C","110 Punch","BNC","MRJ21","FC","LC","LC/APC","LSH","LSH/APC","MPO","MTRJ","SC","SC/APC","ST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontPortTemplateTypeTypeLabelPropEnum = append(frontPortTemplateTypeTypeLabelPropEnum, v)
	}
}

const (

	// FrontPortTemplateTypeLabelNr8P8C captures enum value "8P8C"
	FrontPortTemplateTypeLabelNr8P8C string = "8P8C"

	// FrontPortTemplateTypeLabelNr110Punch captures enum value "110 Punch"
	FrontPortTemplateTypeLabelNr110Punch string = "110 Punch"

	// FrontPortTemplateTypeLabelBNC captures enum value "BNC"
	FrontPortTemplateTypeLabelBNC string = "BNC"

	// FrontPortTemplateTypeLabelMRJ21 captures enum value "MRJ21"
	FrontPortTemplateTypeLabelMRJ21 string = "MRJ21"

	// FrontPortTemplateTypeLabelFC captures enum value "FC"
	FrontPortTemplateTypeLabelFC string = "FC"

	// FrontPortTemplateTypeLabelLC captures enum value "LC"
	FrontPortTemplateTypeLabelLC string = "LC"

	// FrontPortTemplateTypeLabelLCAPC captures enum value "LC/APC"
	FrontPortTemplateTypeLabelLCAPC string = "LC/APC"

	// FrontPortTemplateTypeLabelLSH captures enum value "LSH"
	FrontPortTemplateTypeLabelLSH string = "LSH"

	// FrontPortTemplateTypeLabelLSHAPC captures enum value "LSH/APC"
	FrontPortTemplateTypeLabelLSHAPC string = "LSH/APC"

	// FrontPortTemplateTypeLabelMPO captures enum value "MPO"
	FrontPortTemplateTypeLabelMPO string = "MPO"

	// FrontPortTemplateTypeLabelMTRJ captures enum value "MTRJ"
	FrontPortTemplateTypeLabelMTRJ string = "MTRJ"

	// FrontPortTemplateTypeLabelSC captures enum value "SC"
	FrontPortTemplateTypeLabelSC string = "SC"

	// FrontPortTemplateTypeLabelSCAPC captures enum value "SC/APC"
	FrontPortTemplateTypeLabelSCAPC string = "SC/APC"

	// FrontPortTemplateTypeLabelST captures enum value "ST"
	FrontPortTemplateTypeLabelST string = "ST"
)

// prop value enum
func (m *FrontPortTemplateType) validateLabelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontPortTemplateTypeTypeLabelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FrontPortTemplateType) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var frontPortTemplateTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["8p8c","110-punch","bnc","mrj21","fc","lc","lc-apc","lsh","lsh-apc","mpo","mtrj","sc","sc-apc","st"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontPortTemplateTypeTypeValuePropEnum = append(frontPortTemplateTypeTypeValuePropEnum, v)
	}
}

const (

	// FrontPortTemplateTypeValueNr8p8c captures enum value "8p8c"
	FrontPortTemplateTypeValueNr8p8c string = "8p8c"

	// FrontPortTemplateTypeValueNr110Punch captures enum value "110-punch"
	FrontPortTemplateTypeValueNr110Punch string = "110-punch"

	// FrontPortTemplateTypeValueBnc captures enum value "bnc"
	FrontPortTemplateTypeValueBnc string = "bnc"

	// FrontPortTemplateTypeValueMrj21 captures enum value "mrj21"
	FrontPortTemplateTypeValueMrj21 string = "mrj21"

	// FrontPortTemplateTypeValueFc captures enum value "fc"
	FrontPortTemplateTypeValueFc string = "fc"

	// FrontPortTemplateTypeValueLc captures enum value "lc"
	FrontPortTemplateTypeValueLc string = "lc"

	// FrontPortTemplateTypeValueLcApc captures enum value "lc-apc"
	FrontPortTemplateTypeValueLcApc string = "lc-apc"

	// FrontPortTemplateTypeValueLsh captures enum value "lsh"
	FrontPortTemplateTypeValueLsh string = "lsh"

	// FrontPortTemplateTypeValueLshApc captures enum value "lsh-apc"
	FrontPortTemplateTypeValueLshApc string = "lsh-apc"

	// FrontPortTemplateTypeValueMpo captures enum value "mpo"
	FrontPortTemplateTypeValueMpo string = "mpo"

	// FrontPortTemplateTypeValueMtrj captures enum value "mtrj"
	FrontPortTemplateTypeValueMtrj string = "mtrj"

	// FrontPortTemplateTypeValueSc captures enum value "sc"
	FrontPortTemplateTypeValueSc string = "sc"

	// FrontPortTemplateTypeValueScApc captures enum value "sc-apc"
	FrontPortTemplateTypeValueScApc string = "sc-apc"

	// FrontPortTemplateTypeValueSt captures enum value "st"
	FrontPortTemplateTypeValueSt string = "st"
)

// prop value enum
func (m *FrontPortTemplateType) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontPortTemplateTypeTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FrontPortTemplateType) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FrontPortTemplateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FrontPortTemplateType) UnmarshalBinary(b []byte) error {
	var res FrontPortTemplateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
